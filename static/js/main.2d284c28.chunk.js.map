{"version":3,"sources":["ClientComponent.js","App.js","reportWebVitals.js","index.js"],"names":["socket","ClientComponent","props","useState","players","setPlayers","isVotingEnabled","setIsVotingEnabled","isResultReceived","setIsResultReceived","undefined","match","setMatch","useEffect","socketIOClient","on","console","log","emit","name","player","prevState","playerId","splice","findIndex","p","id","disconnect","type","value","onClick","length","map","n","App","inputName","setInputName","setName","onSubmit","event","preventDefault","placeholder","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setInterval","setTimeout","document","getElementById","href","ReactDOM","render","StrictMode"],"mappings":"yIAIIA,E,gFAEW,SAASC,EAAgBC,GAAQ,IAAD,EACbC,mBAAS,IADI,mBACpCC,EADoC,KAC3BC,EAD2B,OAEGF,oBAAS,GAFZ,mBAEpCG,EAFoC,KAEnBC,EAFmB,OAGKJ,oBAAS,GAHd,mBAGpCK,EAHoC,KAGlBC,EAHkB,OAIjBN,wBAASO,GAJQ,mBAIpCC,EAJoC,KAI7BC,EAJ6B,KAM3CC,qBAAU,WA+BN,OA9BAb,EAASc,IAXA,yCAYFC,GAAG,WAAW,WACjBC,QAAQC,IAAI,aACZjB,EAAOkB,KAAK,OAAQhB,EAAMiB,MAC1Bd,EAAW,IACXE,GAAmB,GACnBE,GAAoB,GACpBG,OAASF,MAGbV,EAAOe,GAAG,UAAU,SAAAK,GAChBJ,QAAQC,IAAI,YAAcG,GAC1Bf,GAAW,SAAAgB,GAAS,4BAAQA,GAAR,CAAmBD,UAG3CpB,EAAOe,GAAG,WAAW,SAAAX,GACjBY,QAAQC,IAAI,YAAcb,GAC1BC,EAAWD,MAGfJ,EAAOe,GAAG,SAAS,SAAAJ,GACfC,EAASD,GACTF,GAAoB,MAGxBT,EAAOe,GAAG,UAAU,SAAAO,GAChBN,QAAQC,IAAI,YAAcK,GAC1BjB,GAAW,SAAAgB,GAAS,OAAIA,EAAUE,OAAOF,EAAUG,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,KAAW,SAGnF,kBAAMtB,EAAO2B,gBACrB,CAACzB,EAAMiB,OAYV,OACI,mCACMX,EACE,qCACKG,EAAQ,oDAAuBA,EAAvB,OAAuC,sDAC/C,uBAAOiB,KAAK,SAASC,MAAM,YAAYC,QAAS,kBAT7DrB,GAAoB,QACpBF,GAAmB,SAUX,mCACKH,EAAQ2B,OACL,mCACKzB,EACGF,EAAQ4B,KAAI,SAAAC,GAAC,OAAI,uBAAkBL,KAAK,SAASC,MAAOI,EAAEd,KAAMW,QAAS,kBArBjFR,EAqBkGW,EAAEP,GApBpHnB,GAAmB,QACnBP,EAAOkB,KAAK,OAAQI,GAFL,IAACA,IAqBqCW,EAAEP,OAC/B,+BAGR,iCCvCTQ,MA7Bf,WAAgB,IAAD,EACqB/B,mBAAS,IAD9B,mBACNgC,EADM,KACKC,EADL,OAEWjC,mBAAS,IAFpB,mBAENgB,EAFM,KAEAkB,EAFA,KASb,OACE,mCACGlB,EACD,cAAClB,EAAD,CAAiBkB,KAAMA,IACvB,uBAAMmB,SATW,SAACC,GACpBF,EAAQF,GACRI,EAAMC,kBAOJ,UACE,uBACEZ,KAAK,OACLC,MAAOM,EACPM,YAAY,qBACZC,SAAU,SAACH,GAAD,OAAWH,EAAaG,EAAMI,OAAOd,UAEjD,uBACED,KAAK,SACLC,MAAM,iBCbDe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCUdQ,aAAY,WAVVC,YAAW,WACTC,SAASC,eAAe,QAAQC,KAAO,cACtC,GAEHH,YAAW,WACTC,SAASC,eAAe,QAAQC,KAAO,YACtC,OAMF,KAGHC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFL,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d284c28.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"https://eyesdowneyesup.herokuapp.com\";\n\nlet socket;\n\nexport default function ClientComponent(props) {\n    const [players, setPlayers] = useState([]);\n    const [isVotingEnabled, setIsVotingEnabled] = useState(true);\n    const [isResultReceived, setIsResultReceived] = useState(false);\n    const [match, setMatch] = useState(undefined);\n\n    useEffect(() => {\n        socket = socketIOClient(ENDPOINT)\n        socket.on(\"connect\", () => {\n            console.log(\"Connected\");\n            socket.emit(\"name\", props.name);\n            setPlayers([]);\n            setIsVotingEnabled(true);\n            setIsResultReceived(false);\n            setMatch(undefined);\n        })\n\n        socket.on(\"player\", player => {\n            console.log(\"Received \" + player);\n            setPlayers(prevState => [...prevState, player]);\n        })\n\n        socket.on(\"players\", players => {\n            console.log(\"Received \" + players);\n            setPlayers(players);\n        })\n\n        socket.on(\"match\", match => {\n            setMatch(match);\n            setIsResultReceived(true);\n        })\n\n        socket.on(\"retire\", playerId => {\n            console.log(\"removing \" + playerId);\n            setPlayers(prevState => prevState.splice(prevState.findIndex(p => p.id === playerId), 1));\n        })\n\n        return () => socket.disconnect();\n    }, [props.name]);\n\n    const handleVote = (playerId) => {\n        setIsVotingEnabled(false);\n        socket.emit(\"vote\", playerId);\n    }\n\n    const handleTryAgain = () => {\n        setIsResultReceived(false);\n        setIsVotingEnabled(true);\n    }\n\n    return (\n        <>\n            { isResultReceived ?\n                <>\n                    {match ? <div>You matched with {match}!</div> : <div>No match for you :(</div>}\n                    {<input type=\"button\" value=\"Try again\" onClick={() => handleTryAgain()}/>}\n                </> :\n                <>\n                    {players.length ?\n                        <>\n                            {isVotingEnabled ?\n                                players.map(n => <input key={n.id} type=\"button\" value={n.name} onClick={() => handleVote(n.id)}/>) :\n                                \"Waiting for others to vote\"\n                            }\n                        </> :\n                        \"Waiting for others to join\"}\n                </>\n            }\n        </>\n    );\n}","import React, {useState} from \"react\";\nimport ClientComponent from \"./ClientComponent\";\n\nfunction App() {\n  const [inputName, setInputName] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    setName(inputName);\n    event.preventDefault();\n  }\n\n  return (\n    <>\n      {name ?\n      <ClientComponent name={name}/> :\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputName}\n          placeholder=\"What is your name?\"\n          onChange={(event) => setInputName(event.target.value)}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n        />\n      </form>}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction iconChange() {\n  setTimeout(function(){\n    document.getElementById(\"icon\").href = \"/down.svg\";\n  }, 0);\n\n  setTimeout(function(){\n    document.getElementById(\"icon\").href = \"/up.svg\";\n  }, 500);\n}\n\n  // window.onload = function() {\nsetInterval(function() {\n  iconChange();\n}, 1000);\n  // };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}